#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"	/* XPAR parameters */
#include "xspi.h"
#include "sleep.h"
#include "spi.h"



int SpiPolledExample(XSpi *SpiInstancePtr, u16 SpiDeviceId, u32  WriteBuff[], u32 ReadBuff[])
{
	init_platform();

	int Status;

	XSpi_Config *ConfigPtr;	/* Pointer to Configuration data */

	ConfigPtr = XSpi_LookupConfig(SpiDeviceId);
	if (ConfigPtr == NULL) {
		return XST_DEVICE_NOT_FOUND;
	}

	Status = XSpi_CfgInitialize(SpiInstancePtr, ConfigPtr,
				  ConfigPtr->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

//#define XSP_MASTER_OPTION		0x1
//#define XSP_CLK_ACTIVE_LOW_OPTION	0x2
//#define XSP_CLK_PHASE_1_OPTION		0x4
//#define XSP_LOOPBACK_OPTION		0x8
//#define XSP_MANUAL_SSELECT_OPTION	0x10


	Status = XSpi_SetOptions(SpiInstancePtr, XSP_MASTER_OPTION | XSP_MANUAL_SSELECT_OPTION | XSP_CLK_ACTIVE_LOW_OPTION | XSP_CLK_PHASE_1_OPTION);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XSpi_Start(SpiInstancePtr);

	XSpi_IntrGlobalDisable(SpiInstancePtr);
	xil_printf("%d",XSpi_GetStatusReg(SpiInstancePtr));

	//u8  WriteBuffer[BUFFER_SIZE]={0x00,0x00};
	//u8  ReadBuffer[BUFFER_SIZE]={0x00,0x00};
	//u16 temp;
	XSpi_SetSlaveSelect(SpiInstancePtr, 0x01);

	for(int i=0; i<BUFFER_SIZE; i++)
  	{
		XSpi_Transfer(SpiInstancePtr, (u32)WriteBuff, (u32)ReadBuff, BUFFER_SIZE);
		//temp = (ReadBuffer[0]*256+ReadBuffer[1])/2;
		//xil_printf("%d\r\n", temp);
	}

	print("\n success");
	return XST_SUCCESS;
}
